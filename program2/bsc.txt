# Setup
c-->from imp import reload
c-->import generator
c-->reload(generator)
c-->import generator
c-->from generator import transform, running_count, n_with_pad, sequence, alternate
c-->from generator import lets
# Test transform
e-->' '.join([str(i) for i in transform('abCdeFg',str.upper)])-->A B C D E F G
e-->' '.join([str(i) for i in transform(lets('abCdefg'),str.upper)])-->A B C D E F G
# Test running_count
e-->' '.join([str(i) for i in running_count('bananastand',lambda x : x in 'aeiou')])-->0 1 1 2 2 3 3 3 4 4 4
e-->' '.join([str(i) for i in running_count(lets('bananastand'),lambda x : x in 'aeiou')])-->0 1 1 2 2 3 3 3 4 4 4
# Test n_with_pad
e-->' '.join([str(i) for i in n_with_pad('abcdefg',3)])-->a b c
e-->' '.join([str(i) for i in n_with_pad('abcdefg',10,'?')])-->a b c d e f g ? ? ?
e-->' '.join([str(i) for i in n_with_pad('abcdefg',10)])-->a b c d e f g None None None
e-->' '.join([str(i) for i in n_with_pad(lets('abcdefg'),10)])-->a b c d e f g None None None
# Test sequence
e-->' '.join([str(i) for i in sequence('abcde','fg','hijk')])-->a b c d e f g h i j k
e-->' '.join([str(i) for i in sequence(lets('abcde'),lets('fg'),lets('hijk'))])-->a b c d e f g h i j k
# Test alternate
e-->' '.join([str(i) for i in alternate('abcde','fg','hijk')])-->a f h b g i c j d k e
e-->' '.join([str(i) for i in alternate(lets('abcde'),lets('fg'),lets('hijk'))])-->a f h b g i c j d k e
